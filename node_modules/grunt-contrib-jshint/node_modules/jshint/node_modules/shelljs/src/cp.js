// Recursively copies 'sourceDir' into 'destDir'
// Adapted from https://github.com/ryanmcgrath/wrench-js
//
// Copyright (c) 2010 Ryan McGrath
// Copyright (c) 2012 Artur Adib
//
// Licensed under the MIT License
// http://www.opensource.org/licenses/mit-license.php

function copyFileSync(e,t){fs.existsSync(e)||common.error("copyFileSync: no such file or directory: "+e);var n=65536,r=new Buffer(n),i=n,s=0,o=null,u=null;try{o=fs.openSync(e,"r")}catch(a){common.error("copyFileSync: could not read src file ("+e+")")}try{u=fs.openSync(t,"w")}catch(a){common.error("copyFileSync: could not write to dest file (code="+a.code+"):"+t)}while(i===n)i=fs.readSync(o,r,0,n,s),fs.writeSync(u,r,0,i),s+=i;fs.closeSync(o),fs.closeSync(u),fs.chmodSync(t,fs.statSync(e).mode)}function cpdirSyncRecursive(e,t,n){n||(n={});var r=fs.statSync(e);try{fs.mkdirSync(t,r.mode)}catch(i){if(i.code!=="EEXIST")throw i}var s=fs.readdirSync(e);for(var o=0;o<s.length;o++){var u=e+"/"+s[o],a=t+"/"+s[o],f=fs.lstatSync(u);if(f.isDirectory())cpdirSyncRecursive(u,a,n);else if(f.isSymbolicLink()){var l=fs.readlinkSync(u);fs.symlinkSync(l,a,os.platform()==="win32"?"junction":null)}else fs.existsSync(a)&&!n.force?common.log("skipping existing file: "+s[o]):copyFileSync(u,a)}}function _cp(e,t,n){e=common.parseOptions(e,{f:"force",R:"recursive",r:"recursive"}),arguments.length<3?common.error("missing <source> and/or <dest>"):arguments.length>3?(t=[].slice.call(arguments,1,arguments.length-1),n=arguments[arguments.length-1]):typeof t=="string"?t=[t]:"length"in t?t=t:common.error("invalid arguments");var r=fs.existsSync(n),i=r&&fs.statSync(n);(!r||!i.isDirectory())&&t.length>1&&common.error("dest is not a directory (too many sources)"),r&&i.isFile()&&!e.force&&common.error("dest file already exists: "+n);if(e.recursive){t.forEach(function(e,n){e[e.length-1]==="/"&&(t[n]+="*")});try{fs.mkdirSync(n,parseInt("0777",8))}catch(s){}}t=common.expand(t),t.forEach(function(t){if(!fs.existsSync(t)){common.error("no such file or directory: "+t,!0);return}if(fs.statSync(t).isDirectory()){if(!e.recursive)common.log(t+" is a directory (not copied)");else{var r=path.join(n,path.basename(t)),i=fs.statSync(t);try{fs.mkdirSync(r,i.mode)}catch(s){if(s.code!=="EEXIST")throw s}cpdirSyncRecursive(t,r,{force:e.force})}return}var o=n;fs.existsSync(n)&&fs.statSync(n).isDirectory()&&(o=path.normalize(n+"/"+path.basename(t)));if(fs.existsSync(o)&&!e.force){common.error("dest file already exists: "+o,!0);return}copyFileSync(t,o)})}var fs=require("fs"),path=require("path"),common=require("./common"),os=require("os");module.exports=_cp;