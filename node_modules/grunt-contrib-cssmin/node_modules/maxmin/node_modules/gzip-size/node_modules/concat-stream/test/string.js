var concat=require("../"),test=require("tape"),TA=require("typedarray"),U8=typeof Uint8Array!="undefined"?Uint8Array:TA.Uint8Array;test("string -> buffer stream",function(e){e.plan(2);var t=concat({encoding:"buffer"},function(t){e.ok(Buffer.isBuffer(t)),e.equal(t.toString("utf8"),"nacho dogs")});t.write("nacho "),t.write("dogs"),t.end()}),test("string stream",function(e){e.plan(2);var t=concat({encoding:"string"},function(t){e.equal(typeof t,"string"),e.equal(t,"nacho dogs")});t.write("nacho "),t.write("dogs"),t.end()}),test("end chunk",function(e){e.plan(1);var t=concat({encoding:"string"},function(t){e.equal(t,"this is the end")});t.write("this "),t.write("is the "),t.end("end")}),test("string from mixed write encodings",function(e){e.plan(2);var t=concat({encoding:"string"},function(t){e.equal(typeof t,"string"),e.equal(t,"nacho dogs")});t.write("na"),t.write(Buffer("cho")),t.write([32,100]);var n=new U8(3);n[0]=111,n[1]=103,n[2]=115,t.end(n)}),test("string from buffers with multibyte characters",function(e){e.plan(2);var t=concat({encoding:"string"},function(t){e.equal(typeof t,"string"),e.equal(t,"☃☃☃☃☃☃☃☃")}),n=new Buffer("☃");for(var r=0;r<8;r++)t.write(n.slice(0,1)),t.write(n.slice(1));t.end()}),test("string infer encoding with empty string chunk",function(e){e.plan(2);var t=concat(function(t){e.equal(typeof t,"string"),e.equal(t,"nacho dogs")});t.write(""),t.write("nacho "),t.write("dogs"),t.end()});